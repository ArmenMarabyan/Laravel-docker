version: '3.7'


networks:
    project_app:
        driver: bridge
    elk:
        driver: bridge

volumes:
    setup_elk:
    elasticsearch:

services:

  app:
    container_name: ${PREFIX}_app
    image: ${PREFIX}_app
    build: ./fpm
    restart: always
    volumes:
      - ${SOURCE_DIR}:${TARGET_DIR}
    networks:
      - project_app

  nginx:
    container_name: ${PREFIX}_nginx
    image: ${PREFIX}_nginx
    build: ./nginx
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ${SOURCE_DIR}:${TARGET_DIR}
      - ./logs/nginx:/var/log/nginx
      - ./nginx/sites:/etc/nginx/conf.d
#    links:
#      - app
    stdin_open: true
    tty: true
    networks:
      - project_app
    depends_on:
      - app

  db:
    image: mariadb:10.4
    container_name: ${PREFIX}_db
    restart: always
    environment:
      - MYSQL_ROOT_USER=${MYSQL_ROOT_USER}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - ${DB_PATH_HOST}:/var/lib/mysql

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: ${PREFIX}_phpmyadmin
    ports:
      - 8081:80
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=db
    depends_on:
      - db

  redis:
    image: redis:latest
    container_name: ${PREFIX}_redis
    working_dir: ${APP_PATH_CONTAINER}
    restart: always
    ports:
      - "6380:6379"
    volumes:
      - ${REDIS_PATH_CONF}:/redis.conf
    command: [ "redis-server", "/redis.conf" ]

    # The 'setup_elk' service runs a one-off script which initializes the
    # 'logstash_internal' and 'kibana_system' users inside Elasticsearch with the
    # values of the passwords defined in the '.env' file.
    #
    # This task is only performed during the *initial* startup of the stack. On all
    # subsequent runs, the service simply returns immediately, without performing
    # any modification to existing users.
  setup_elk:
      build:
          context: ./elk/setup_elk/
          args:
              ELASTIC_VERSION: ${ELASTIC_VERSION}
      container_name: ${PREFIX}_setup_elk
      init: true
      volumes:
          - ./elk/setup_elk:/state:Z
      environment:
          ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
          LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
          KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      networks:
          - elk
      depends_on:
          - elasticsearch

  elasticsearch:
      build:
          context: ./elk/elasticsearch/
          args:
              ELASTIC_VERSION: ${ELASTIC_VERSION}
      container_name: ${PREFIX}_elasticsearch
      volumes:
          - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
          - ./elk/elasticsearch:/usr/share/elasticsearch/data:z
      ports:
          - "9200:9200"
          - "9300:9300"
      environment:
          ES_JAVA_OPTS: -Xms512m -Xmx512m
          # Bootstrap password.
          # Used to initialize the keystore during the initial startup of
          # Elasticsearch. Ignored on subsequent runs.
          ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
          # Use single node discovery in order to disable production mode and avoid bootstrap checks.
          # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
          discovery.type: single-node
      networks:
          - elk

  logstash:
      build:
          context: ./elk/logstash/
          args:
              ELASTIC_VERSION: ${ELASTIC_VERSION}
      container_name: ${PREFIX}_logstash
      volumes:
          - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
          - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
      ports:
          - "5044:5044"
          - "50000:50000/tcp"
          - "50000:50000/udp"
          - "9600:9600"
      environment:
          LS_JAVA_OPTS: -Xms256m -Xmx256m
          LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      networks:
          - elk
      depends_on:
          - elasticsearch

  kibana:
      build:
          context: ./elk/kibana/
          args:
              ELASTIC_VERSION: ${ELASTIC_VERSION}
      container_name: ${PREFIX}_kibana
      volumes:
          - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
      ports:
          - "5601:5601"
      environment:
          KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      networks:
          - elk
      depends_on:
          - elasticsearch





#  elasticsearch:
#    image: elasticsearch:7.8.1
#    container_name: ${PREFIX}_elasticsearch
#    volumes:
#      - ./elasticsearch/healthcheck.sh:/bin/healthcheck.sh
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#    environment:
#      discovery.type: single-node
#    healthcheck:
#      test: ['CMD', 'bash', '/bin/healthcheck.sh']
#      interval: 10s
#      timeout: 20s
#      retries: 3

#  rabbitmq:
#    image: rabbitmq:3-management-alpine
#    container_name: ${PREFIX}_rabbitmq
#    ports:
#      - "15672:15672"
#      - "5672:5672"
#    volumes:
#      - ${RABBIT_MQ_DATA}:/var/lib/rabbitmq/
#      - ${RABBIT_MQ_LOGS}:/var/log/rabbitmq
#      - ./queues/healthcheck.sh:/bin/healthcheck.sh
#    healthcheck:
#      test: ['CMD', 'bash', '/bin/healthcheck.sh']
#      interval: 5s
#      timeout: 10s
#      retries: 3
